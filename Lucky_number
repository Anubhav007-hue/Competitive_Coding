Given an array of integers arr, a lucky integer is an integer which has a frequency in the array equal to its value.

Return a lucky integer in the array. If there are multiple lucky integers return the largest of them. If there is no lucky integer return -1.

 

Example 1:

Input: arr = [2,2,3,4]
Output: 2
Explanation: The only lucky number in the array is 2 because frequency[2] == 2.

Example 2:

Input: arr = [1,2,2,3,3,3]
Output: 3
Explanation: 1, 2 and 3 are all lucky numbers, return the largest of them.

Example 3:

Input: arr = [2,2,2,3,3]
Output: -1
Explanation: There are no lucky numbers in the array.

Example 4:

Input: arr = [5]
Output: -1

Example 5:

Input: arr = [7,7,7,7,7,7,7]
Output: 7

 

Constraints:

    1 <= arr.length <= 500
    1 <= arr[i] <= 500





Code ........................................


class Solution {
    public int findLucky(int[] arr) {
       ArrayList<Integer> list=new ArrayList<>();
        int k=0;
        int i=0;
        int j=i+1;
        int count=0;
        Arrays.sort(arr);
        while(i<arr.length && j<arr.length)
        {
            if(arr[i]==arr[j])
            {
                count++;
                j++;
            }

            else
            {
                count++;
                if(count==arr[i])
                {
                    list.add(arr[i]);
                }
                count=0;
                i=j;
                j=j+1;
            }
        }
        count++;
        if(count==arr[i])
        {
            list.add(arr[i]);
        }

        int max=0;
        for(k=0;k<list.size() ;k++)

        {
            if(list.get(k)>max)
            {
                max=list.get(k);
            }


        }

        if(list.size()==0)
        { return -1;
        }

        return max;
    }
}
