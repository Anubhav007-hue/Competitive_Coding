Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7

return its bottom-up level order traversal as:

[
  [15,7],
  [9,20],
  [3]
]




Code..........................................

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> level_order=new ArrayList<>();
        
        if(root==null)
        {
            return level_order;
        }
        Queue<TreeNode> queue=new LinkedList<>();
        
        queue.add(root);
        
        while(!queue.isEmpty())
        {
            int size=queue.size(); 
     
            ArrayList<Integer> current_list=new ArrayList<>();
            for(int i=0;i<size;i++)
            {
                       TreeNode current=queue.remove();
                current_list.add(current.val);
                
                if(current.left!=null)
                {
                    queue.add(current.left);
                }
                
                if(current.right!=null)
                {
                    queue.add(current.right);
                }
            }
            
            level_order.add(0,current_list);
            
        }
        
        return level_order;
        
    }
}
