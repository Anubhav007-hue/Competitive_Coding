Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].

Example 2:

Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.





Code ....................



         if(intervals == null || intervals.length == 0)
            return intervals;
        
        Arrays.sort(intervals, (arr1, arr2) -> Integer.compare(arr1[0],arr2[0]));
        
        List<int[]> list=new ArrayList<int[]>();
        int i=0;
        int j=1;
        int length =intervals.length;
        int[] temp=new int[2];
        while(i<length-1 && j<length)
        {
            int [] current=intervals[i];
            int [] next=intervals[j];

            if(current[1]>=next[0])
            {
                current[0]=Math.min(current[0],next[0]);
                current[1]=Math.max(current[1],next[1]);
                temp=current;

                j++;
            }

            else if (current[1]<next[0])
            {
                i=j;
                j++;
                list.add(current);
                temp=current;
            }
        }

        if(i==intervals.length -1)
        {
            list.add(intervals[i]);
        }

        else if (i<length -1)
        {
            list.add(temp);
        }

      
  
     return list.toArray(new int[list.size()][]);
